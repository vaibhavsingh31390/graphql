type Query {
  job(id: ID!): Job
  jobs: [Job!]
  jobsByUserId(id: ID!): [Job!]
  company(id: ID!): Company
  companys: [Company!]
  user(id: ID!): User
  users: [User!]
  me: User!
}

type Job {
  id: ID!
  companyId: ID!
  userId: ID!
  title: String!
  description: String!
  createdAt: String
  updatedAt: String
  date: String
  company: Company!
  user: User!
  showActions: Boolean
}

type Company {
  id: ID!
  name: String!
  description: String!
  date: String
  createdAt: String
  updatedAt: String
  jobs: [Job!]
}

type User {
  id: ID!
  companyId: ID!
  name: String!
  email: String!
  date: String
  createdAt: String
  updatedAt: String
  jobs: [Job!]
}

type Mutation {
  createJob(input: createJobInput!): Job
  createUser(input: createUserInput!): User
  loginUser(input: loginUserInput!): User
  createCompany(input: createCompanyInput!): Company
  deleteJob(id: ID!): Job
  deleteUser(id: ID!): User
  deleteCompany(id: ID!): Company
  updateJob(id: ID!, input: updateJobInput!): Job
  updateUser(id: ID!, input: updateUserInput!): User
  updateCompany(id: ID!, input: updateUserInput!): Company
}

input createJobInput {
  title: String!
  description: String!
  companyId: String!
}
input createUserInput {
  name: String!
  email: String!
  password: String!
}

input loginUserInput {
  email: String!
  password: String!
}

input createCompanyInput {
  name: String!
  description: String!
}

input updateJobInput {
  title: String
  description: String
  companyId: String
}

input updateUserInput {
  email: String
  password: String
}

input updateCompanyInput {
  name: String
  description: String
}
